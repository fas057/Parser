import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import random
import logging
import boto3
from botocore.exceptions import NoCredentialsError, ClientError, NoRegionError
import io
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SELECTEL CLOUD STORAGE
# =============================================================================
class SelectelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Selectel Cloud Storage."""
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ACCESS_KEY = os.getenv('SELECTEL_ACCESS_KEY')
    SECRET_KEY = os.getenv('SELECTEL_SECRET_KEY')
    BUCKET_NAME = os.getenv('SELECTEL_BUCKET_NAME', 'quotes-parser-bucket')
    ENDPOINT_URL = os.getenv('SELECTEL_ENDPOINT', 'https://s3.storage.selcloud.ru')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    }
    
    MIN_DELAY = 1.0
    MAX_DELAY = 2.0
    MAX_RETRIES = 3
    TIMEOUT = 10
    BASE_URL = "http://quotes.toscrape.com/"

# =============================================================================
# SELECTEL CLOUD STORAGE MANAGER
# =============================================================================
class SelectelStorageManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selectel Cloud Storage."""
    
    def __init__(self, config: SelectelConfig):
        self.config = config
        self.s3_client = None
        self.is_connected = False
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Selectel Cloud Storage."""
        try:
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Selectel: {self.config.ENDPOINT_URL}")
            
            self.s3_client = boto3.client(
                's3',
                endpoint_url=self.config.ENDPOINT_URL,
                aws_access_key_id=self.config.ACCESS_KEY,
                aws_secret_access_key=self.config.SECRET_KEY,
                region_name='ru-7'  # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è Selectel
            )
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ bucket'–æ–≤
            self.s3_client.list_buckets()
            self.is_connected = True
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Selectel Cloud Storage")
            
        except NoCredentialsError:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Selectel")
            raise
        except ClientError as e:
            error_code = e.response['Error']['Code']
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Selectel: {error_code} - {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def create_bucket(self):
        """–°–æ–∑–¥–∞–µ—Ç bucket –≤ Selectel."""
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {self.config.BUCKET_NAME}")
            
            # –î–ª—è Selectel –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å LocationConstraint
            self.s3_client.create_bucket(
                Bucket=self.config.BUCKET_NAME,
                CreateBucketConfiguration={
                    'LocationConstraint': 'ru-7'
                }
            )
            
            logger.info(f"‚úÖ Bucket {self.config.BUCKET_NAME} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == 'BucketAlreadyExists':
                logger.info(f"‚ÑπÔ∏è Bucket {self.config.BUCKET_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            elif error_code == 'BucketAlreadyOwnedByYou':
                logger.info(f"‚ÑπÔ∏è Bucket {self.config.BUCKET_NAME} —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤–∞–º–∏")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {error_code} - {e}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ bucket: {e}")
            return False
    
    def check_bucket_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket."""
        try:
            self.s3_client.head_bucket(Bucket=self.config.BUCKET_NAME)
            logger.info(f"‚úÖ Bucket {self.config.BUCKET_NAME} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == '404':
                logger.info(f"‚ÑπÔ∏è Bucket {self.config.BUCKET_NAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket: {error_code} - {e}")
                return False
    
    def ensure_bucket(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        if self.check_bucket_exists():
            return True
        return self.create_bucket()
    
    def upload_dataframe(self, df, object_name, format='csv'):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DataFrame –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        if not self.is_connected:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Selectel")
            return False
        
        if not self.ensure_bucket():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket")
            return False
        
        try:
            if format == 'csv':
                csv_buffer = io.StringIO()
                df.to_csv(csv_buffer, index=False, encoding='utf-8')
                self.s3_client.put_object(
                    Bucket=self.config.BUCKET_NAME,
                    Key=object_name,
                    Body=csv_buffer.getvalue().encode('utf-8'),
                    ContentType='text/csv; charset=utf-8'
                )
            
            logger.info(f"‚úÖ –§–∞–π–ª {object_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except ClientError as e:
            error_code = e.response['Error']['Code']
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {object_name}: {error_code} - {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {object_name}: {e}")
            return False
    
    def list_files(self):
        """–°–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ bucket."""
        if not self.is_connected:
            return []
        
        try:
            response = self.s3_client.list_objects_v2(Bucket=self.config.BUCKET_NAME)
            if 'Contents' in response:
                return [obj['Key'] for obj in response['Contents']]
            return []
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == 'NoSuchBucket':
                logger.error(f"‚ùå Bucket {self.config.BUCKET_NAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return []

# =============================================================================
# –ü–ê–†–°–ï–† –¶–ò–¢–ê–¢
# =============================================================================
class QuotesScraper:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ quotes.toscrape.com."""
    
    def __init__(self, config: SelectelConfig):
        self.config = config
        self.session = requests.Session()
        self.session.headers.update(config.HEADERS)
    
    def get_random_delay(self):
        return random.uniform(self.config.MIN_DELAY, self.config.MAX_DELAY)
    
    def make_request(self, url: str):
        for attempt in range(self.config.MAX_RETRIES):
            try:
                logger.info(f"üåê –ó–∞–ø—Ä–æ—Å: {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                response = self.session.get(url, timeout=self.config.TIMEOUT)
                
                if response.status_code == 200:
                    time.sleep(self.get_random_delay())
                    return BeautifulSoup(response.content, 'html.parser')
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}")
                    time.sleep(self.get_random_delay() * 2)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                time.sleep(self.get_random_delay() * 2)
        
        return None
    
    def parse_quote(self, quote_element):
        try:
            text = quote_element.find('span', class_='text').text.strip()
            author = quote_element.find('small', class_='author').text.strip()
            tags = [tag.text for tag in quote_element.find_all('a', class_='tag')]
            
            return {
                'quote': text,
                'author': author,
                'tags': ', '.join(tags),
                'tags_list': tags,
                'quote_length': len(text)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–∏—Ç–∞—Ç—ã: {e}")
            return None
    
    def scrape_all_quotes(self):
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–∏—Ç–∞—Ç")
        all_quotes = []
        page_num = 1
        
        while True:
            if page_num == 1:
                url = self.config.BASE_URL
            else:
                url = f"{self.config.BASE_URL}page/{page_num}/"
            
            soup = self.make_request(url)
            if not soup:
                break
            
            quotes = soup.find_all('div', class_='quote')
            page_quotes = []
            
            for quote_element in quotes:
                quote_data = self.parse_quote(quote_element)
                if quote_data:
                    page_quotes.append(quote_data)
            
            all_quotes.extend(page_quotes)
            logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: {len(page_quotes)} —Ü–∏—Ç–∞—Ç")
            
            if not soup.find('li', class_='next'):
                break
            
            page_num += 1
            time.sleep(self.get_random_delay())
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ: {len(all_quotes)} —Ü–∏—Ç–∞—Ç")
        return all_quotes

# =============================================================================
# –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–•
# =============================================================================
def filter_and_analyze_data(quotes_data):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    df = pd.DataFrame(quotes_data)
    
    logger.info("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # 1. –§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
    # –¢–æ–ø –∞–≤—Ç–æ—Ä—ã (–±–æ–ª–µ–µ 1 —Ü–∏—Ç–∞—Ç—ã)
    author_counts = df['author'].value_counts()
    top_authors = author_counts[author_counts >= 1].index
    filtered_by_author = df[df['author'].isin(top_authors)]
    
    # –¶–∏—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    filtered_by_length = df[df['quote_length'] > 20]
    
    # –¶–∏—Ç–∞—Ç—ã —Å —Ç–µ–≥–∞–º–∏
    filtered_with_tags = df[df['tags'].str.len() > 0]
    
    # 2. –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º
    author_stats = df.groupby('author').agg({
        'quote': 'count',
        'quote_length': 'mean'
    }).rename(columns={'quote': 'quotes_count', 'quote_length': 'avg_length'})
    author_stats = author_stats.round(2)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º
    all_tags = []
    for tags in df['tags_list']:
        all_tags.extend(tags)
    
    tag_stats = pd.Series(all_tags).value_counts().reset_index()
    tag_stats.columns = ['tag', 'count']
    
    # 3. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–¢–ê–°–ï–¢–û–í –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò
    datasets = {
        # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'all_quotes.csv': df[['quote', 'author', 'tags', 'quote_length']],
        
        # –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'filtered/top_authors.csv': filtered_by_author[['quote', 'author', 'tags']],
        'filtered/long_quotes.csv': filtered_by_length[['quote', 'author', 'tags']],
        'filtered/with_tags.csv': filtered_with_tags[['quote', 'author', 'tags']],
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'analytics/author_statistics.csv': author_stats.reset_index(),
        'analytics/tag_statistics.csv': tag_stats,
        'analytics/top_10_tags.csv': tag_stats.head(10),
    }
    
    return datasets, df

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        config = SelectelConfig()
        
        print("=" * 60)
        print("–ü–ê–†–°–ï–† –¶–ò–¢–ê–¢ –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í SELECTEL CLOUD STORAGE")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not config.ACCESS_KEY or not config.SECRET_KEY:
            print("‚ùå ERROR: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Selectel")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
            print("SELECTEL_ACCESS_KEY=–≤–∞—à_access_key")
            print("SELECTEL_SECRET_KEY=–≤–∞—à_secret_key")
            print("SELECTEL_BUCKET_NAME=quotes-parser-bucket (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            return
        
        print(f"üîë Access Key: {config.ACCESS_KEY[:10]}...")
        print(f"üì¶ Bucket: {config.BUCKET_NAME}")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_manager = SelectelStorageManager(config)
        
        if not storage_manager.is_connected:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Selectel")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        scraper = QuotesScraper(config)
        quotes_data = scraper.scrape_all_quotes()
        
        if not quotes_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        datasets, original_df = filter_and_analyze_data(quotes_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        original_df.to_csv('all_quotes_local.csv', index=False)
        logger.info("üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: all_quotes_local.csv")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Selectel Cloud Storage
        logger.info("‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Selectel Cloud Storage...")
        
        uploaded_files = []
        for filename, dataset in datasets.items():
            logger.info(f"‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {filename}")
            if storage_manager.upload_dataframe(dataset, filename, format='csv'):
                uploaded_files.append(filename)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {filename}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {filename}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "=" * 50)
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ü–∏—Ç–∞—Ç: {len(original_df)}")
        print(f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {original_df['author'].nunique()}")
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–µ–≥–æ–≤
        all_tags = []
        for tags in original_df['tags_list']:
            all_tags.extend(tags)
        print(f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: {len(set(all_tags))}")
        
        print(f"\nüì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ Selectel: {len(uploaded_files)}")
        for file in uploaded_files:
            print(f"  ‚úì {file}")
        
        if uploaded_files:
            print("\n" + "=" * 50)
            print("‚úÖ –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("=" * 50)
        else:
            print("\n" + "=" * 50)
            print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Selectel")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bucket")
            print("=" * 50)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()